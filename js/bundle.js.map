{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA,uCAAuC;AACvC,2CAA2C;AAC3C,MAAM,OAAO;AACb,wBAAwB;AACxB;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,0EAA0E;AAC1E,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6GAA6G;AAC7G,UAAU;AACV,8GAA8G;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,oDAAoD;AACpD,2DAA2D;AAC3D,kEAAkE;AAClE,yFAAyF;AACzF,kBAAkB;AAClB,uDAAuD;AACvD;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,wDAAwD;AACxD,iBAAiB;AACjB;AACA,qDAAqD;AACrD;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,4EAA4E;AAC5E,6FAA6F;AAC7F;AACA,+CAA+C;AAC/C,wDAAwD;AACxD;AACA,gDAAgD;AAChD;AACA,2CAA2C;AAC3C,uEAAuE;AACvE,cAAc;AACd,qEAAqE;AACrE;AACA;AACA,+CAA+C;AAC/C;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,IAAI;;;;;;;;;;;;;;;AClHgC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,gCAAgC;AAChC;AACA,wBAAwB;AACxB;AACA;AACA,mBAAmB;AACnB;AACA;AACA,6CAA6C;AAC7C,6CAA6C;AAC7C;AACA,cAAc;AACd,qFAAqF;AACrF;AACA;AACA;AACA,+BAA+B,UAAU,MAAM,SAAS;AACxD,sDAAsD,WAAW;AACjE,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA,8DAA8D,WAAW;AACzE;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+DAAW;AACf;AACA,2BAA2B,iCAAiC;AAC5D,6FAA6F;AAC7F,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0BAA0B,iCAAiC;AAC3D;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK,MAAM,OAAO;AAC5C,iDAAiD,MAAM;AACvD,+CAA+C,MAAM;AACrD;AACA;AACA;AACA,yDAAyD,MAAM;AAC/D;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,iCAAiC;AACjC,oDAAoD;AACpD,mCAAmC;AACnC;AACA,oEAAoE;AACpE;AACA,4DAA4D;AAC5D,2CAA2C;AAC3C;AACA;AACA,qDAAqD;AACrD,mDAAmD;AACnD;AACA;AACA,oDAAoD;AACpD;AACA;AACA,uCAAuC;AACvC;AACA;AACA,iDAAiD;AACjD;AACA,oEAAoE;AACpE,qCAAqC;AACrC;AACA;AACA,wBAAwB;AACxB,qBAAqB;AACrB;AACA;AACA,gBAAgB;AAChB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iCAAiC;AACnE,oGAAoG;AACpG,oBAAoB;AACpB,gBAAgB;AAChB;AACA;AACA;AACA,iEAAe,KAAK;;;;;;;;;;;;;;;;AC9I4B,CAAC;AACD,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kCAAkC;AAClC,iDAAiD;AACjD,gCAAgC;AAChC;AACA,iEAAiE;AACjE,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA,qDAAqD;AACrD,mDAAmD;AACnD;AACA;AACA,mDAAmD;AACnD;AACA;AACA,kCAAkC;AAClC;AACA,wCAAwC;AACxC,gBAAgB;AAChB;AACA,oDAAoD;AACpD;AACA,kCAAkC;AAClC;AACA;AACA,iDAAiD;AACjD;AACA,yDAAyD;AACzD,qCAAqC;AACrC;AACA,qBAAqB;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,iFAAiF;AACjF;AACA;AACA,iCAAiC;AACjC;AACA,wCAAwC;AACxC,gBAAgB;AAChB;AACA,YAAY,4DAAQ;AACpB,4BAA4B;AAC5B,mCAAmC;AACnC,kDAAkD;AAClD;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA,aAAa,kBAAkB;AAC/B,8BAA8B;AAC9B,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,+CAA+C;AAC/C,QAAQ,iDAAS,0BAA0B;AAC3C;AACA,2DAA2D;AAC3D,oDAAoD;AACpD;AACA;AACA,4DAA4D;AAC5D,4CAA4C,QAAQ;AACpD;AACA,WAAW;AACX;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA,YAAY,kDAAU;AACtB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK;;;;;;;;;;;;;;;;ACzHpB;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,uBAAuB;AACvB,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF,KAAK;AACL;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA,KAAK;AACL;AACA,kDAAkD;AAClD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;AACD,CAAC;;;;;;;;;;;;;;;AC/DrB,kBAAkB,qFAAqF;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA,gEAAgE;AAChE;AACA,2DAA2D;AAC3D;AACA,qCAAqC;AACrC,yCAAyC,WAAW,GAAG;AACvD,aAAa;AACb,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,gCAAgC,cAAc;AAC9C,kCAAkC,WAAW;AAC7C,MAAM;AACN;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,KAAK;AACL;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,oBAAoB,mBAAmB;AACvC,kDAAkD;AAClD,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA,gCAAgC;AAChC;AACA;AACA;AACA,8CAA8C;AAC9C,oFAAoF;AACpF;AACA;AACA,2BAA2B;AAC3B,aAAa,OAAO;AACpB,4DAA4D;AAC5D,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA,UAAU;AACV;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,UAAU;AACV;AACA;AACA;AACA,uDAAuD;AACvD,gDAAgD;AAChD,KAAK;AACL;AACA;AACA,2CAA2C;AAC3C,2BAA2B;AAC3B,mEAAmE;AACnE,UAAU,OAAO;AACjB,8CAA8C;AAC9C;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,UAAU;AACV;AACA;AACA;AACA,uDAAuD;AACvD,gDAAgD;AAChD,KAAK;AACL;AACA;AACA;AACA,0BAA0B;AAC1B,+CAA+C;AAC/C,oEAAoE;AACpE;AACA,kCAAkC;AAClC;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA,0CAA0C,WAAW;AACrD,cAAc;AACd;AACA;AACA;AACA,2DAA2D;AAC3D,oDAAoD;AACpD,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,iEAAe,MAAM;;;;;;;;;;;;;;ACtNrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,SAAS;AACT;AACA;AACA,gDAAgD;AAChD,SAAS;AACT;AACA;AACA,qCAAqC;AACrC,sDAAsD;AACtD,iDAAiD;AACjD,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,0EAA0E;AAC1E;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA,iEAAe,IAAI,EAAC,CAAC;;;;;;;;;;;;;;AC1CrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,uBAAuB,IAAI;AAC3B,UAAU;AACV;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA,uBAAuB;AACvB;AACA;AACA,iDAAiD;AACjD;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK;;;;;;;;;;;;;;;ACtDpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kBAAkB;AAClB,2CAA2C,IAAI,WAAW,WAAW,IAAI;AACzE;AACA;AACA;AACA;AACA;AACkB;;;;;;;UCrBlB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;ACNkC,CAAC;AACC;AACA;AACA;AACF;AACE;AACE;AACM;AAC5C;AACA;AACA;AACA,0CAA0C,yDAAS,kCAAkC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yDAAI;AACR,IAAI,0DAAK,0CAA0C;AACnD,IAAI,0DAAK;AACT,IAAI,0DAAK;AACT,IAAI,yDAAI;AACR,IAAI,0DAAK;AACT,IAAI,2DAAM,GAAG;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD","sources":["webpack://038-food-dist/./js/modules/calc.js","webpack://038-food-dist/./js/modules/cards.js","webpack://038-food-dist/./js/modules/forms.js","webpack://038-food-dist/./js/modules/modal.js","webpack://038-food-dist/./js/modules/slider.js","webpack://038-food-dist/./js/modules/tabs.js","webpack://038-food-dist/./js/modules/timer.js","webpack://038-food-dist/./js/services/services.js","webpack://038-food-dist/webpack/bootstrap","webpack://038-food-dist/webpack/runtime/define property getters","webpack://038-food-dist/webpack/runtime/hasOwnProperty shorthand","webpack://038-food-dist/webpack/runtime/make namespace object","webpack://038-food-dist/./js/script.js"],"sourcesContent":["function calc () {\r\n    // КАЛЬКУЛЯТОР\r\n\r\n    const result = document.querySelector('.calculating__result span'); //Итоговая цифра\r\n\r\n    let sex, height, weight, age, ratio; \r\n\r\n    if (localStorage.getItem('sex')) { //Если в значении пола, в Local Storage есть информация\r\n        sex = localStorage.getItem('sex'); //Устанавливаем в переменную sex эту информацию из Local Storage\r\n    } else { //Если никакой информации нет\r\n        sex = 'female'; //Устанавливаем в переменную значение по умолчанию \r\n        localStorage.setItem('sex', 'female');\r\n    }\r\n\r\n    if (localStorage.getItem('ratio')) {  //Делаем тоже самое с физической активностью \r\n        ratio = localStorage.getItem('ratio'); \r\n    } else { \r\n        ratio = 1.375; \r\n        localStorage.setItem('ratio', 1.375);\r\n    }\r\n\r\n    function initLocalSettings(selector, activeClass) { //Для установки активных значений исходя из данных из Local Storage \r\n        const elements = document.querySelectorAll(selector);\r\n\r\n        elements.forEach(elem => {\r\n            elem.classList.remove(activeClass);\r\n            if(elem.getAttribute('id') === localStorage.getItem('sex')) { //Если текущий атрибут id совпадает с информацией в Local Storage\r\n                elem.classList.add(activeClass); //Добавляем активный класс \r\n            }\r\n\r\n            if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\r\n                elem.classList.add(activeClass);\r\n            }\r\n        });\r\n    }\r\n\r\n    initLocalSettings('#gender div', 'calculating__choose-item_active');\r\n    initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\r\n\r\n    function caltTotal() {\r\n        if (!sex || !height || !weight || !age || !ratio) {\r\n            result.textContent = '____';\r\n            return;\r\n        }\r\n\r\n        if (sex == 'female') { \r\n            result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 *age)) * ratio); // Для девушек\r\n        } else {\r\n            result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 *age)) * ratio); // Для мужчин\r\n        }\r\n    };\r\n\r\n    caltTotal();\r\n\r\n    function getStaticInformation(selector, activeClass) {\r\n        const elements = document.querySelectorAll(selector);\r\n        \r\n        elements.forEach(elem => { //На каждый элемент навешиваем обработчик событий\r\n            elem.addEventListener('click', (e) => { //Когда нажимаем на кнопки калькулятора\r\n                if (e.target.getAttribute('data-ratio')) { //Если у блока есть атрибут data-ratio, то изменяем переменную ratio (физ. активность)\r\n                    ratio = +e.target.getAttribute('data-ratio'); //Присваевыем переменной ratio то значение, которое находится в атрибуте кнопки (н-р 1.2, 1.375, 1.55 или 1.725)\r\n                    localStorage.setItem('ratio', +e.target.getAttribute('data-ratio')); //Записываем эту информацию в Local Storage, чтобы при обновлении сохранить это \r\n                } else {\r\n                    sex = e.target.getAttribute('id'); //Если это был клик не на физ. активность, значит отслеживаем клик на кнопку с полом \r\n                    localStorage.setItem('sex', e.target.getAttribute('id'));\r\n                }\r\n    \r\n    \r\n                elements.forEach(elem => { //Берем все элементы\r\n                    elem.classList.remove(activeClass); //Убираем активный класс со всех элементов\r\n                })\r\n    \r\n                e.target.classList.add(activeClass); //Добавляем активный класс элементу, на который кликнули \r\n    \r\n                caltTotal()\r\n            });\r\n        });\r\n    }\r\n\r\n    getStaticInformation('#gender div', 'calculating__choose-item_active'); // Присваеваем блоку gender calculating__choose-item_active - класс активности\r\n    getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active'); // Присваемваем блоку из физ. активности - класс активности \r\n\r\n    function getDynamicInformation(selector) { //Получение информации для блоков с ростом, весом и возрастом \r\n        const input = document.querySelector(selector); //Получаем селектор с блоком\r\n\r\n        input.addEventListener('input', () => { //Отслеживаем введенные значения в input\r\n\r\n            if(input.value.match(/\\D/g)) { //Если нашли НЕ число, в введенных input, значит некорректно\r\n                input.style.boxShadow = '0 2px 15px rgb(250,128,114)'; //Меняем тень на красный, указывая, что ошибка ввода (введена буква)\r\n            } else {\r\n                input.style.boxShadow = '0 4px 15px rgba(0,0,0,.2)'; //Возвращаем обратно\r\n            }\r\n\r\n            switch(input.getAttribute('id')) { //Проверяем с помощью id, в какой из блоков ввели данные\r\n                case 'height': //Если это в блок с ростом\r\n                    height = +input.value; //Добавляем данные в переменную рост \r\n                    break;\r\n                case 'weight':\r\n                    weight = +input.value;\r\n                    break;\r\n                case 'age':\r\n                    age = +input.value;\r\n                    break;\r\n            }\r\n            caltTotal()\r\n        });\r\n\r\n    }\r\n\r\n    getDynamicInformation('#height');\r\n    getDynamicInformation('#weight');\r\n    getDynamicInformation('#age');\r\n};\r\n\r\nexport default calc;","import { getResourse } from \"../services/services\";\r\n\r\nfunction cards () {\r\n    // Используем классы для карточек\r\n\r\n    class MenuCard {\r\n        constructor(src, alt, title, descr, price, parentSelector, ...classes) {\r\n            this.src = src;\r\n            this.alt = alt;\r\n            this.title = title;\r\n            this.descr = descr;\r\n            this.price = price;\r\n            this.classes = classes; //В случае увеличения информации в карточке, будем передавать с помощью rest оператора ... новые значения в виде массива\r\n            this.parent = document.querySelector(parentSelector)//Обращаемся к родительскому DOM элементу\r\n            this.transfer = 78;\r\n            this.changeToRUB(); //Вызываем метод \r\n        }\r\n        changeToRUB() { //Поступает цена в долларах, мы переводим в рубли\r\n            this.price = this.price * this.transfer;\r\n        }\r\n        render() { //Выстраиваем HTML структуру\r\n            const element = document.createElement('div'); \r\n\r\n            if (this.classes.length === 0) { //Если в classes не передали значения для родительского элемента\r\n                this.element = 'menu__item'; //По умолчанию будет добавляться родительский элемент menu__item\r\n                element.classList.add(this.element);\r\n            } else {\r\n                this.classes.forEach(className => element.classList.add(className)); //Иначе, добавляем нужный класс\r\n            }\r\n            \r\n            element.innerHTML = `\r\n                    <img src=${this.src} alt=${this.alt}>\r\n                    <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n                    <div class=\"menu__item-descr\">${this.descr}</div>\r\n                    <div class=\"menu__item-divider\"></div>\r\n                    <div class=\"menu__item-price\">\r\n                        <div class=\"menu__item-cost\">Цена:</div>\r\n                        <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>\r\n                    </div>\r\n            `;\r\n            this.parent.append(element); //Помещаем в конец родителя элемент \r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    //ПЕРВЫЙ ВАРИАНТ\r\n    getResourse(\"http://localhost:3000/menu\") //С помощью запроса мы получили массив с меню (с объектами)\r\n        .then(data => {\r\n            data.forEach(({img, altimg, title, descr, price}) => {\r\n                new MenuCard(img, altimg, title, descr, price, '.menu .container').render(); //Конструктор будет создаваться столько раз, сколько  объектов в массиве (карточек) \r\n            });\r\n        });\r\n    \r\n    //ВТОРОЙ ВАРИАНТ ФОРМИРОВАНИЯ КАРТОЧЕК\r\n    // getResourse(\"http://localhost:3000/menu\")\r\n    //     .then(data => createCard(data));\r\n    // function createCard(data) {\r\n    //     data.forEach(({img, altimg, title, descr, price}) => {\r\n    //         const element = document.createElement('div');\r\n    //         price = price * 82;\r\n    //         element.classList.add('menu__item');\r\n\r\n    //         element.innerHTML = `\r\n    //         <img src=${img} alt=${altimg}>\r\n    //         <h3 class=\"menu__item-subtitle\">${title}</h3>\r\n    //         <div class=\"menu__item-descr\">${descr}</div>\r\n    //         <div class=\"menu__item-divider\"></div>\r\n    //         <div class=\"menu__item-price\">\r\n    //             <div class=\"menu__item-cost\">Цена:</div>\r\n    //             <div class=\"menu__item-total\"><span>${price}</span> руб/день</div>\r\n    //         </div>\r\n    //         `;\r\n\r\n    //         document.querySelector('.menu .container').append(element);\r\n    //     });\r\n    // }\r\n\r\n    // ФОРМЫ В ОБЫЧНОМ ФОРМАТЕ\r\n\r\n    // const forms = document.querySelectorAll('form');\r\n\r\n    // const message = {\r\n    //     loading: 'Загрузка',\r\n    //     success: 'Спасибо! Скоро мы с вами свяжемся',\r\n    //     failure: 'Что-то пошло не так...'\r\n    // };\r\n\r\n    // forms.forEach(item => {\r\n    //     postData(item);\r\n    // });\r\n\r\n    // function postData(form) { //Функция принимает в себе форму, аргумент\r\n    //     form.addEventListener('submit', (e) => { //На эту форму навешиваем обработчик события на submit, оно срабатывает, когда пытаемся отправить форму\r\n    //         e.preventDefault(); //Отменяем стандартное поведение браузера, чтобы не перезагружался \r\n\r\n    //         const statusMessage = document.createElement('div'); //Чтобы создать новый див, в котором будет сообщение\r\n    //         statusMessage.classList.add('status');\r\n    //         statusMessage.textContent = message.loading; //Если загрузка\r\n    //         form.append(statusMessage); // К форме будем добавлять сообщение\r\n\r\n\r\n    //         const request = new XMLHttpRequest(); //Создаём объект \r\n    //         request.open('POST', 'server.php'); //Вызываем метод open(), чтобы настроить запрос и внутрь помещаем данные \r\n            \r\n\r\n    //         const formData = new FormData(form); //Помещяем конструктор, внутри будет форма, с которой мы хотим собрать данные\r\n    //         //В вёрстке, обязательно в теге input должен быть атрибут name=\"name\", иначе input не сможет сработать\r\n\r\n    //         request.send(formData); //Отправялем форму, которую запонили\r\n\r\n    //         request.addEventListener('load', () => {\r\n    //             if (request.status === 200) { //Если статус \"Все хорошо, данные ушли\"\r\n    //                 console.log(request.response);\r\n    //                 statusMessage.textContent = message.success; //Если все хорошо\r\n    //                 form.reset(); //Сброс формы \r\n    //                 setTimeout(() => {\r\n    //                     statusMessage.remove();\r\n    //                 }, 2000);\r\n    //             } else {\r\n    //                 statusMessage.textContent = message.failure //Иначе, что что-то пошло не так\r\n    //             }\r\n    //         })\r\n    //     });\r\n    // }\r\n\r\n\r\n\r\n    //ФОРМЫ В ФОРМАТЕ JSON\r\n\r\n\r\n    //ТРЕТИЙ ВАРИАНТ С ИСПОЛЬЗОВАНИЕМ БИБЛИОТЕКИ AXIOS\r\n    // axios.get(\"http://localhost:3000/menu\")\r\n    //     .then(data => {\r\n            //     data.forEach(({img, altimg, title, descr, price}) => {\r\n            //         new MenuCard(img, altimg, title, descr, price, '.menu .container').render(); //Конструктор будет создаваться столько раз, сколько  объектов в массиве (карточек) \r\n            //     });\r\n            // });\r\n\r\n}\r\n\r\nexport default cards;","import { closeModal, openModal } from \"./modal\"; //Импортируем эти два модуля из modal.js\r\nimport { postData } from \"../services/services\"; //Импортируем сервисом для обработки базы данных в этот файл\r\n\r\nfunction forms (formSelector, modalTimerId) {\r\n    // Формы\r\n    const forms = document.querySelectorAll(formSelector);\r\n\r\n    const message = {\r\n        loading: 'img/form/spinner.svg',\r\n        success: 'Спасибо! Скоро мы с вами свяжемся',\r\n        failure: 'Что-то пошло не так...'\r\n    };\r\n\r\n    forms.forEach(item => {\r\n        bindPostData(item);\r\n    });\r\n\r\n\r\n    function bindPostData(form) { //Функция принимает в себе форму, аргумент\r\n        form.addEventListener('submit', (e) => { //На эту форму навешиваем обработчик события на submit, оно срабатывает, когда пытаемся отправить форму\r\n            e.preventDefault(); //Отменяем стандартное поведение браузера, чтобы не перезагружался \r\n\r\n            const statusMessage = document.createElement('img'); //Создали изображение\r\n            statusMessage.src = message.loading; //Подставили к нему путь\r\n            statusMessage.style.cssText = `\r\n                display: block;\r\n                margin: 0 auto;\r\n            `;\r\n\r\n            form.insertAdjacentElement('afterend', statusMessage); //К форме будем добавлять сообщение\r\n\r\n            //СТАРЫЙ ВАРИАНТ\r\n            // const request = new XMLHttpRequest(); //Создаём объект \r\n            // request.open('POST', 'server.php'); //Вызываем метод open(), чтобы настроить запрос и внутрь помещаем данные \r\n\r\n            //request.setRequestHeader('Content-type', 'application/json');\r\n            //const formData = new FormData(form); //Помещяем конструктор, внутри будет форма, с которой мы хотим собрать данные\r\n            //В вёрстке, обязательно в теге input должен быть атрибут name=\"name\", иначе input не сможет сработать\r\n\r\n            // const object = {}; //Просто так перегнать из обычного формата в json нельзя, поэтому создаём объект\r\n            // formData.forEach(function(value, key) {\r\n            //     object[key] = value; //На основании значений, которые были в formData, мы сформируем объект, с помощью перебора\r\n            // });\r\n\r\n            // const json = JSON.stringify(object); //После перегонки значений через forEach и перемещения в объект, изменяем эти значения в вид JSON\r\n\r\n            //request.send(json); //Отправялем форму, которую запонили\r\n\r\n            // request.addEventListener('load', () => {\r\n            //     if (request.status === 200) { //Если статус \"Все хорошо, данные ушли\"\r\n            //         console.log(request.response);\r\n            //         showThanksModal(message.success); //Если все хорошо\r\n            //         form.reset(); //Сброс формы \r\n            //         statusMessage.remove();\r\n            //     } else {\r\n            //         showThanksModal(message.failure) //Иначе, что что-то пошло не так\r\n            //     }\r\n            // });\r\n\r\n\r\n            //НОВЫЙ ВАРИАНТ\r\n\r\n            //fetch мы берем данные, передаём их и с помощью then мы что-то выполняем, н-р, пишем, что все хорошо\r\n            //Если что-то пошло не так, мы с помощью catch сообщаем об ошибке\r\n            //В любом случае, хоть положительно или отрицательно пройдет запрос, мы что-то делаем в finally \r\n\r\n            const formData = new FormData(form); //Помещяем конструктор, внутри будет форма, с которой мы хотим собрать данныеь\r\n\r\n            const json = JSON.stringify(Object.fromEntries(formData.entries())); //С entries Получим данные в виде массива с массивами [['a', 23], ['b', 50], ['c', 1] ]\r\n            //С помощью Object.fromEntries() массив с массивами переводим в обычный объект  \r\n\r\n            //const object = {}; //Просто так перегнать из обычного формата в json нельзя, поэтому создаём объект - Старый вариант\r\n            // formData.forEach(function(value, key) {\r\n            //     object[key] = value; //На основании значений, которые были в formData, мы сформируем объект, с помощью перебора\r\n            // });\r\n\r\n            postData('http://localhost:3000/requests', json) //Ранее созданную переменную json отправляем на сервер\r\n            .then(data => { //Что нужно выполнить\r\n                console.log(data); //data - данные, которые нам вернулись из сервера \r\n                showThanksModal(message.success); //Если все хорошо \r\n                statusMessage.remove();\r\n            }).catch(() => { //Если есть ошибка, но он не реагирует на ошибки http, например, если будет 404 (Не найдено), из-за нарушенного пути к серверу,\r\n                // он все равно выполнит запрос, как обычно, только при сбое сети он выполнит действия\r\n                showThanksModal(message.failure) //Информация, что что-то пошло не так\r\n            }).finally(() => { //У нас есть действие, в независимости от того, запрос обработался или произошла ошибка, мы в любом случае делаем сброс формы\r\n                form.reset(); //Сброс формы\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    function showThanksModal(message) { //Модальное окно с информацией, после отправки данных\r\n        const prevModalDialog = document.querySelector('.modal__dialog');\r\n\r\n        prevModalDialog.classList.add('hide'); //Добавляет класс, чтобы скрыть модальное окно \r\n        openModal('.modal', modalTimerId); //Ранее создавали функцию, для открытия модального окна\r\n\r\n        const thanksModal = document.createElement('div'); //Создаём див, где будет информация в модальном окне\r\n        thanksModal.classList.add('modal__dialog'); //Добавляем класс этому диву\r\n        thanksModal.innerHTML = `\r\n            <div class=\"modal__content\"> \r\n                <div class=\"modal__close\" data-close>&times;</div>\r\n                <div class=\"modal__title\">${message}</div>\r\n            </div>\r\n        `; //Создаём структуру, где будет информация в модальном окне\r\n\r\n        document.querySelector('.modal').append(thanksModal); //Добавляем к селектору .modal нашу созданную HTML струтуру\r\n        setTimeout(() =>{\r\n            thanksModal.remove();\r\n            prevModalDialog.classList.add('show');\r\n            prevModalDialog.classList.remove('hide');\r\n            closeModal('.modal');\r\n        }, 4000);\r\n    }\r\n\r\n\r\n    fetch('http://localhost:3000/menu') //Подключение файла json с базой данных, перед началом работы нужно вводить npx json-server db.json\r\n        .then(data => data.json())\r\n        .then(res => console.log(res));\r\n}\r\n\r\nexport default forms;","\r\nfunction closeModal(modalSelector) { //Закрытие окна\r\n    const modal = document.querySelector(modalSelector);\r\n    \r\n    modal.classList.add('hide');\r\n    modal.classList.remove('show');\r\n    document.body.style.overflow = ''; //Возвращаем\r\n}\r\n\r\nfunction openModal(modalSelector, modalTimerId) {\r\n    const modal = document.querySelector(modalSelector);\r\n\r\n    \r\n    modal.classList.add('show');\r\n    modal.classList.remove('hide');\r\n    document.body.style.overflow = 'hidden'; //Убираем прокрутку\r\n\r\n    console.log(modalTimerId);\r\n    if (modalTimerId){ //Если есть таймер, то включаем очистку таймера \r\n        clearInterval(modalTimerId); //Если пользователь сам нажмёт, таймер отключится\r\n    }\r\n}\r\nfunction modal (triggerSelector, modalSelector, modalTimerId) {\r\n    /*----------------Modal---------------------*/\r\n    \r\n    const modalTrigger = document.querySelectorAll(triggerSelector),\r\n        modal = document.querySelector(modalSelector);\r\n    \r\n\r\n\r\n    modalTrigger.forEach(btn => {\r\n        btn.addEventListener('click', () => openModal(modalSelector, modalTimerId)); //Функция openModal не вызывается сразу, а с помощью ()=> вызывается после клика \r\n    });\r\n\r\n\r\n\r\n    modal.addEventListener('click', (e) => {\r\n        if (e.target === modal || e.target.getAttribute('data-close') == '') { //При нажатии на div modal (тёмный фон) и также если элемент имеет атрибут data-close, вызывается функция закрытия\r\n            closeModal(modalSelector);\r\n        }\r\n    });\r\n\r\n    document.addEventListener('keydown', (e) => { //При нажатии на ESC\r\n        if (e.code === \"Escape\" && modal.classList.contains('show')) {\r\n            closeModal(modalSelector);\r\n        }\r\n    });\r\n\r\n\r\n\r\n\r\n    function showModalByScroll(){\r\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) //Видимая часть экрана складываем с полной длинной страницей\r\n        {\r\n            openModal(modalSelector, modalTimerId);\r\n            window.removeEventListener('scroll', showModalByScroll);\r\n        }\r\n    }\r\n    \r\n    window.addEventListener('scroll', showModalByScroll) //Открытие модального окна при прокрутки вниз до конца\r\n}\r\n\r\nexport default modal;\r\nexport {closeModal}; //Передаём эти две функции, чтобы использовать их в forms.js  \r\nexport {openModal};","function slider ({container, slide, nextArrow, prevArrow, totalCounter, currentCounter, wrapper, field}) {\r\n        \r\n    // СЛАЙДЕР\r\n\r\n    const slides = document.querySelectorAll(slide),\r\n        slider = document.querySelector(container),\r\n        prev = document.querySelector(prevArrow),\r\n        next = document.querySelector(nextArrow),\r\n        total = document.querySelector(totalCounter),\r\n        current = document.querySelector(currentCounter),\r\n        slidesWrapper = document.querySelector(wrapper), // Оболочка\r\n        slidesField = document.querySelector(field), // Поле со слайдами\r\n        width = window.getComputedStyle(slidesWrapper).width; //Окошко, через скоторое будем смотреть на слайды\r\n\r\n    let slideIndex = 1;\r\n    let offset = 0;\r\n\r\n\r\n    //ПРОСТОЙ ВАРИАНТ\r\n    // showSlides(slideIndex);\r\n\r\n    // if (slides.length < 10) {\r\n    //     total.textContent = `0${slides.length}`;\r\n    // } else {\r\n    //     total.textContent = slides.length;\r\n    // }\r\n\r\n    // function showSlides(n) {\r\n    //     if (n > slides.length) {\r\n    //         slideIndex = 1;\r\n    //     }\r\n\r\n\r\n    //     if (n < 1) {\r\n    //         slideIndex = slideIndex.length; // Присваиваем граничное значение\r\n    //     }\r\n        \r\n    //     slides.forEach(item => item.style.display = 'none'); //Скрываем карточки\r\n\r\n    //     slides[slideIndex - 1].style.display = 'block'; //Так как вначале он был 1, а отсчёт начинается с 0\r\n\r\n    //     if (slides.length < 10) { //Изменяем счетчик в слайдере\r\n    //         current.textContent = `0${slideIndex}`; //Если меньше 10, то добавляем 0\r\n    //     } else {\r\n    //         current.textContent = slideIndex; //Если больше 10, то просто число\r\n    //     }\r\n        \r\n    // }\r\n\r\n    // function plusSlides(n) {\r\n    //     showSlides(slideIndex += n); //Вызывает функцию и увеличивает на значение n, например, +1 когда вперед, и -1 когда назад\r\n    // }\r\n\r\n    // prev.addEventListener('click', () => {\r\n    //     plusSlides(-1);\r\n    // });\r\n\r\n    // next.addEventListener('click', () => {\r\n    //     plusSlides(1);\r\n    // });\r\n\r\n    if (slides.length < 10) {\r\n        total.textContent = `0${slides.length}`;\r\n        current.textContent = `0${slideIndex}`;\r\n    } else {\r\n        total.textContent = slides.length;\r\n        current.textContent = slideIndex;\r\n    }\r\n\r\n    slidesField.style.width = 100 * slides.length + '%'; //Все слайды мы помещаем на странице, в slidesField, чтобы они помещались полностью. Пишем '%', так как это стили css\r\n    slidesField.style.display = 'flex';\r\n    slidesField.style.transition = '0.5s all';\r\n    \r\n    slidesWrapper.style.overflow = 'hidden'; //Скрываем все остальные картинки, которые не попадают в это \"окошко\", область видимости\r\n\r\n    slides.forEach(slide => {\r\n        slide.style.width = width;\r\n    });\r\n\r\n    slider.style.position = 'relative'; // Для нормального отображения абсолютно спозиционированных стилей \r\n\r\n    const indicators = document.createElement('ol'), //Создаём стили для контейнера индикаторов\r\n        dots = [];\r\n\r\n    indicators.classList.add('carousel-indicators'); // Добавляем класс и стили \r\n    indicators.style.cssText = `\r\n        position: absolute;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 15;\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-right: 15%;\r\n        margin-left: 15%;\r\n        list-style: none;\r\n    `;\r\n    slider.append(indicators); //Добавляем в конец \r\n\r\n    for (let i = 0; i < slides.length; i++) {\r\n        const dot = document.createElement('li'); //Создаём элемент точки и даём стили\r\n        dot.setAttribute('data-slide-to', i + 1); // Каждой точке будем устанавливать атрибут data-slide-to и давать нумерацию, начиная с единицы \r\n        dot.style.cssText = `\r\n            box-sizing: content-box;\r\n            flex: 0 1 auto;\r\n            width: 30px;\r\n            height: 6px;\r\n            margin-right: 3px;\r\n            margin-left: 3px;\r\n            cursor: pointer;\r\n            background-color: #fff;\r\n            background-clip: padding-box;\r\n            border-top: 10px solid transparent;\r\n            border-bottom: 10px solid transparent;\r\n            opacity: .5;\r\n            transform: opacity .6s ease;\r\n        `;\r\n        if (i == 0) { \r\n            dot.style.opacity = 1; //Когда первая точка активна, она белая \r\n        }\r\n        indicators.append(dot); // Когда цикл сработает будет определенное количество точек \r\n        dots.push(dot);\r\n    };\r\n\r\n    // next.addEventListener('click', () => { //При нажатии на стрелочку \"вправо\"\r\n    //     if (offset == +width.slice(0, width.length - 2) * (slides.length - 1)) { //Если это последний слайд, то мы сдвигаем на первый\r\n    //         //Используем унарный +, чтобы перевести в число, затем метод slice, чтобы разбить значение \"500px\" на 500 и px, для этого мы выделяем начало строки и оставляем\r\n    //         //сиволы до последних двух элементов, затем полученное число умножаем на количество слайдов \r\n    //         offset = 0; //Если слайд последний, то сдвигается все на 0\r\n    //     } else { //Если слайд не последний\r\n    //         offset += +width.slice(0, width.length - 2); //Двигаем вправо, т.е. прибавляем к текущему значению картинок, еще одну ширину картинки\r\n    //     } //Н-р если 1 картинка 500px + вторая картинка 500px = 1000px, затем еще третья и будет 1500px \r\n\r\n    //МОЖЕМ СДЕЛАТЬ ЛЕГЧЕ С РЕГУЛЯРНЫМИ ВЫРАЖЕНИЯМИ\r\n\r\n    function deleteNotDigits(str) {\r\n        return +str.replace(/\\D/g, '');\r\n    }\r\n\r\n    next.addEventListener('click', () => {\r\n        if (offset == deleteNotDigits(width) * (slides.length - 1)) { //Ищем НЕ числа и заменяем на пустоту, они удаляются\r\n            offset = 0;\r\n        } else {\r\n            offset += deleteNotDigits(width);\r\n        }\r\n\r\n        slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n        if (slideIndex == slides.length){\r\n            slideIndex = 1;\r\n        } else {\r\n            slideIndex++;\r\n        }\r\n\r\n        if (slides.length < 10) {\r\n            current.textContent = `0${slideIndex}`;\r\n        } else {\r\n            current.textContent = slideIndex;\r\n        }\r\n\r\n        dots.forEach(dot => dot.style.opacity = '.5'); //Изначально у каждой точки полупрозрачный стиль\r\n        dots[slideIndex - 1].style.opacity = 1; //При изменении, точка становится белой\r\n    });\r\n\r\n\r\n    prev.addEventListener('click', () => { //При нажатии на стрелочку \"влево\", делаем все наоборот\r\n        if (offset == 0) { //Если это первый слайд, то мы сдвигаем на последний\r\n            offset = deleteNotDigits(width) * (slides.length - 1); //Если слайд последний, то сдвигается все на 0\r\n        } else { //Если слайд не последний\r\n            offset -= deleteNotDigits(width); //Отнимаем ширину слайда, на которую смещаем\r\n        } \r\n\r\n        slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n        if (slideIndex == 1){\r\n            slideIndex = slides.length;\r\n        } else {\r\n            slideIndex--;\r\n        }\r\n\r\n        if (slides.length < 10) {\r\n            current.textContent = `0${slideIndex}`;\r\n        } else {\r\n            current.textContent = slideIndex;\r\n        }\r\n\r\n        dots.forEach(dot => dot.style.opacity = '.5'); //Изначально у каждой точки полупрозрачный стиль\r\n        dots[slideIndex - 1].style.opacity = 1; //При изменении, точка становится белой\r\n    });\r\n\r\n\r\n\r\n    dots.forEach(dot => { // Берём каждую точку \r\n        dot.addEventListener('click', (e) => { //Навешиваем обработчик событий \r\n            const slideTo = e.target.getAttribute('data-slide-to'); //Ловим событие, на каждой точке\r\n\r\n            slideIndex = slideTo; //Если нажмём на одну из точек, присвоется нужный индекс \r\n            offset = deleteNotDigits(width) * (slideTo - 1);\r\n\r\n            slidesField.style.transform = `translateX(-${offset}px)`;\r\n\r\n            if (slides.length < 10) {\r\n                current.textContent = `0${slideIndex}`;\r\n            } else {\r\n                current.textContent = slideIndex;\r\n            }\r\n            \r\n            dots.forEach(dot => dot.style.opacity = '.5'); //Изначально у каждой точки полупрозрачный стиль\r\n            dots[slideIndex - 1].style.opacity = 1; //При изменении, точка становится белой\r\n        });\r\n    });\r\n\r\n}\r\n\r\nexport default slider;","function tabs (tabsSelector, tabsContentSelector, tabsParentSelector, activeClass) {\r\n    //Tabs\r\n    const tabs = document.querySelectorAll(tabsSelector),\r\n    tabsContent = document.querySelectorAll(tabsContentSelector),\r\n    tabsParent = document.querySelector(tabsParentSelector);\r\n    \r\n    function hideTabContent() {\r\n        tabsContent.forEach(item =>{ //Перебираем псевдомассив и скрываем контент на сайте\r\n            item.classList.add('hide');\r\n            item.classList.remove('show', 'fade');\r\n        });\r\n\r\n        tabs.forEach(item => {\r\n            item.classList.remove(activeClass); //У каждого из табов удаляем класс активности\r\n        });\r\n    }\r\n    \r\n    function showTabContent(i = 0) { //В объявлении аргументов можем сразу присвоить значнеие 0, так как оно по умолчанию\r\n        tabsContent[i].classList.add('show', 'fade'); //Добавляем css анимации\r\n        tabsContent[i].classList.remove('hide'); //Ранее мы ставили display none, и в противовес этому, делаем display block, чтобы отбразить на странице\r\n        tabs[i].classList.add(activeClass); //Добавляем класс \r\n    }\r\n    //Т.е. мы скрываем все табы и отображаем только тот, который нас интересует\r\n\r\n    hideTabContent();\r\n    showTabContent();\r\n\r\n    tabsParent.addEventListener('click', function(event) {\r\n        const target = event.target; //Чтобы сэкономить время и не писать везде event.target, можем просто перенести в переменную target\r\n\r\n        if (target && target.classList.contains(tabsSelector.slice(1))) { //Проверяем, кликнули ли в один из элементов в списке, а не на родителя, также, в contains вставляется класс без точки в начале, поэтому передаём аргумент tabsSelector и с помощью slice(1), убираем первый знак (точка)\r\n            tabs.forEach((item, i) => {\r\n                if (target == item) {\r\n                    hideTabContent();\r\n                    showTabContent(i); //Перебираются элементы на страницы, проверятся, куда был клик и тот элемент, на который был клик, подставляется\r\n                    //В функцию showTabContent\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nexport default tabs; // Экспортируем функцию tabs","function timer (id, deadline) {\r\n    //Timer\r\n\r\n\r\n    function getTimeRemaining(endTime) {\r\n        const t = Date.parse(endTime) - Date.parse(new Date()), //Получаем разницу в миллисекундах\r\n            days = Math.floor(t / (1000 * 60 * 60 * 24)), //Делим миллисекунды и переводим в дни\r\n            hours = Math.floor((t / (1000 * 60 * 60) % 24)), //Количество часов, делим % 24 это будет остаток от деления, чтобы получить от общего количества часов \r\n            minutes = Math.floor((t / 1000 / 60) % 60), //Получаем от общего кол-ва минут, минуты в 60\r\n            seconds = Math.floor((t / 1000) % 60);\r\n        return {\r\n            'total': t, //В будущем это значение также будем использовать, сравнивать, вдруг время уже закончилось\r\n            'days': days,\r\n            'hours': hours,\r\n            'minutes': minutes,\r\n            'seconds': seconds\r\n        };\r\n    };\r\n\r\n    function getZero(num) { //Чтобы на странице отображались цифры меньше 10, с 0, например, 09\r\n        if (num >= 0 && num < 10) {\r\n            return `0${num}`;\r\n        } else {\r\n            return num\r\n        }\r\n    };\r\n\r\n    function setClock(selector, endtime) { //Установка таймера\r\n        const timer = document.querySelector(selector),\r\n            days = timer.querySelector('#days'),\r\n            hours = timer.querySelector('#hours'),\r\n            minutes = timer.querySelector('#minutes'),\r\n            seconds = timer.querySelector('#seconds'), //Получили все элементы со страницы\r\n            timeInterval = setInterval(updateClock, 1000); //Чтобы время обновлялось каждую секунду, создаем интервал и вызываем функцию\r\n        \r\n        updateClock(); //Вызываем функцию, чтобы на странице не была отображена верстка со стандартными числами\r\n\r\n        function updateClock() {\r\n            const t = getTimeRemaining(endtime); //Здесь передается полученное время в виде объекта\r\n\r\n            days.innerHTML = getZero(t.days); //Обращаемся к объекту и передаем информацию из него на страницу\r\n            hours.innerHTML = getZero(t.hours);\r\n            minutes.innerHTML = getZero(t.minutes);\r\n            seconds.innerHTML = getZero(t.seconds);\r\n\r\n            if(t.total <= 0) { //Если разница между текущей датой и установленной даты уже меньше нуля\r\n                clearInterval(timeInterval) //Останавливаем интервал, если время закончилось\r\n            };\r\n        }\r\n    }\r\n\r\n    setClock(id, deadline);\r\n}\r\n\r\nexport default timer;","const postData = async (url, data) => {\r\n    const res = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        },\r\n        body: data\r\n    });\r\n    return await res.json();\r\n};\r\n\r\nasync function getResourse(url) { // get запрос\r\n    const res = await fetch(url);\r\n    \r\n    if(!res.ok) { //У fetch есть свойство ok, проверяет, все ли хорошо отрабатывает, если результат с ошибкой \r\n        throw new Error(`Could not fetch ${url}, status ${res.status}`); //Выкидываем новую ошибку с url и статусом \r\n    }\r\n\r\n    return await res.json(); \r\n};\r\n\r\nexport {postData}; \r\nexport {getResourse};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import tabs from './modules/tabs'; //Новый метод из ES6\r\nimport modal from './modules/modal';\r\nimport timer from './modules/timer';\r\nimport cards from './modules/cards';\r\nimport calc from './modules/calc';\r\nimport forms from './modules/forms';\r\nimport slider from './modules/slider';\r\nimport { openModal } from './modules/modal';\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n\r\n    const modalTimerId = setTimeout(() => openModal('.modal', modalTimerId), 10000); //Через оперделенный промежуток времени, запустится функция, которая запустит openModal\r\n\r\n\r\n    // const tabs = require('./modules/tabs'), СТАРЫЙ ВАРИАНТ\r\n    //     modal = require('./modules/modal'),\r\n    //     timer = require('./modules/timer'),\r\n    //     cards = require('./modules/cards'),\r\n    //     calc = require('./modules/calc'),\r\n    //     forms = require('./modules/forms'),\r\n    //     slider = require('./modules/slider');\r\n\r\n    tabs('.tabheader__item', '.tabcontent', '.tabheader__items', 'tabheader__item_active');\r\n    modal('[data-modal]', '.modal', modalTimerId); //Передаём в модуль modal \r\n    timer('.timer', '2023-10-11');\r\n    cards();\r\n    calc();\r\n    forms('form', modalTimerId);\r\n    slider({ //Деструкторизация, создаём объект и передаем значения\r\n        container:'.offer__slider',\r\n        nextArrow: '.offer__slider-next',\r\n        prevArrow: '.offer__slider-prev',\r\n        slide: '.offer__slide',\r\n        totalCounter: '#total',\r\n        currentCounter: '#current', \r\n        wrapper: '.offer__slider-wrapper',\r\n        field: '.offer__slider-inner'\r\n    });\r\n\r\n});\r\n\r\n"],"names":[],"sourceRoot":""}